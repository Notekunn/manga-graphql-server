datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  name        String?
  email       String        @unique
  password    String
  avatarURL   String?
  role        UserRole      @default(MEMBER)
  GroupMember GroupMember[]
}

model Artist {
  id        Int     @id @default(autoincrement())
  name      String
  slug      String  @unique
  about     String?
  avatarURL String?
  mangas    Manga[]
}

model Category {
  id          Int                 @id @default(autoincrement())
  title       String
  slug        String              @unique
  description String?
  mangas      CategoriesOnManga[]
}

model Group {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  mangas      GroupsOnManga[]

  GroupMember GroupMember[]
  @@map("group")
}

model GroupMember {
  groupId       Int
  memberId      Int
  role          GroupRole @default(MEMBER)
  group         Group     @relation(fields: [groupId], references: [id])
  member        User      @relation(fields: [memberId], references: [id])
  participantAt DateTime  @default(now()) @db.DateTime(0)

  @@id([groupId, memberId])
  @@map("group_member")
}

model Manga {
  id               Int                 @id @default(autoincrement())
  name             String
  slug             String              @unique
  otherName        String?
  description      String?
  status           MangaStatus         @default(ONGOING)
  coverURL         String?
  releaseYear      String?
  lastUpdated      DateTime            @default(now()) @db.DateTime(0)
  viewCount        Int                 @default(0)
  artist           Artist              @relation(fields: [artistId], references: [id])
  artistId         Int
  categories       CategoriesOnManga[]
  translatorGroups GroupsOnManga[]
  chapters         Chapter[]
}

model CategoriesOnManga {
  manga      Manga    @relation(fields: [mangaId], references: [id])
  mangaId    Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([mangaId, categoryId])
  @@map("category_manga")
}

model GroupsOnManga {
  mangaId Int
  groupId Int
  manga   Manga @relation(fields: [mangaId], references: [id])
  group   Group @relation(fields: [groupId], references: [id])

  @@id([mangaId, groupId])
  @@map("group_manga")
}

model Chapter {
  id              Int         @id @default(autoincrement())
  chapterName     String
  mangaId         Int
  manga           Manga       @relation(fields: [mangaId], references: [id])
  chapterFullName String?
  viewCount       Int         @default(0)
  lastUpdated     DateTime    @default(now()) @db.DateTime(0)
  content         String?     @db.Text
  ViewCount       ViewCount[]
}

model ViewCount {
  chapterId Int
  date      String
  view      Int     @default(0)
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@id([chapterId, date])
  @@map("view_count")
}

enum UserRole {
  MEMBER
  MODERATOR
  ADMINISTRATOR
}

enum MangaStatus {
  CANCELLED
  DROPPED
  ONGOING
  COMPLETED
}

enum GroupRole {
  MEMBER
  MODERATOR
}
